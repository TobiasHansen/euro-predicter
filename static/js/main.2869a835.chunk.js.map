{"version":3,"sources":["utils.ts","GroupTable.tsx","StandingsTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["correctResult","game1","game2","homeScore","awayScore","correctWinner","GroupTable","group","results","players","gamesInGroup","filter","game","type","Paper","style","width","margin","elevation","columns","title","field","detailPanel","rowData","predictions","map","p","find","id","name","marginLeft","homeTeam","awayTeam","data","options","showTitle","paging","search","sorting","toolbar","header","padding","rowStyle","rData","backgroundColor","toString","onRowClick","event","togglePanel","tableLayout","StandingsTable","finishedGames","res","playerScores","player","score","winner","wrong","forEach","prediction","gameResult","points","sort","a","b","playerNames","groups","App","useState","setPlayers","setResults","useEffect","Papa","parse","process","download","skipEmptyLines","complete","push","time","display","flexWrap","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2869a835.chunk.js","sourcesContent":["import {Game} from \"./App\";\n\nexport const correctResult = (game1: Game, game2: Game) => game1.homeScore === game2.homeScore && game1.awayScore === game2.awayScore;\n\nexport const correctWinner = (game1: Game, game2: Game) => (game1.homeScore > game1.awayScore && game2.homeScore > game2.awayScore)\n    || (game1.homeScore === game1.awayScore && game2.homeScore === game2.awayScore)\n    || (game1.homeScore < game1.awayScore && game2.homeScore < game2.awayScore)\n","import React from \"react\";\nimport {Paper} from \"@material-ui/core\";\nimport MaterialTable from \"@material-table/core\";\nimport {Game, Player} from \"./App\";\nimport {correctResult, correctWinner} from \"./utils\";\n\nexport function GroupTable({group, results, players}: { group: string, results: Game[], players: Player[] }) {\n    const gamesInGroup = results.filter(game => game.type === group);\n    return (\n        <Paper style={{width: '700px', margin: '5px'}} elevation={3}>\n            <MaterialTable\n                columns={[\n                    {title: 'Tid', field: 'time', width: '60px'},\n                    {title: 'Hjemmelag', field: 'homeTeam', width: '75px'},\n                    {title: '', field: 'homeScore', width: '30px'},\n                    {title: '', field: 'awayScore', width: '30px'},\n                    {title: 'Bortelag', field: 'awayTeam', width: '75px'},\n                ]}\n                detailPanel={rowData => {\n                    const predictions: { homeScore: number; awayScore: number; name: string }[] =\n                        players.map(p => {\n                            const game = p.predictions.find(game => game.id === rowData.id)!!;\n                            return {\n                                name: p.name,\n                                homeScore: game?.homeScore,\n                                awayScore: game?.awayScore\n                            }\n                        })\n                    return (\n                        <MaterialTable\n                            style={{width: '310px', marginLeft: '10px'}}\n                            columns={[\n                                {title: 'Navn', field: 'name', width: '90px'},\n                                {title: rowData.homeTeam, field: 'homeScore', width: '29px'},\n                                {title: rowData.awayTeam, field: 'awayScore', width: '29px'},\n                            ]}\n                            data={predictions}\n                            options={{\n                                showTitle: false,\n                                paging: false,\n                                search: false,\n                                sorting: false,\n                                toolbar: false,\n                                header: false,\n                                padding: 'dense',\n                                rowStyle: rData => {\n                                    const gameNotPlayed = rowData.homeScore.toString() === '';\n                                    return {\n                                        backgroundColor: gameNotPlayed ? '' : correctResult(rowData, rData) ? 'green' : correctWinner(rowData, rData) ? 'orange' : 'red'\n                                    }\n                                }\n                            }}\n                        />\n                    )\n                }}\n                data={[...gamesInGroup]}\n                title={group}\n                onRowClick={(event, rowData, togglePanel) => togglePanel ? togglePanel() : {}}\n                options={{\n                    paging: false,\n                    search: false,\n                    sorting: false,\n                    header: false,\n                    tableLayout: 'fixed',\n                }}\n            />\n        </Paper>\n    )\n}\n","import React from \"react\";\nimport {Paper} from \"@material-ui/core\";\nimport MaterialTable from \"@material-table/core\";\nimport {Game, Player} from \"./App\";\nimport {correctResult, correctWinner} from \"./utils\";\n\nexport function StandingsTable({results, players}: { results: Game[], players: Player[] }) {\n    const finishedGames = results.filter(res => res.awayScore.toString() !== '');\n    const playerScores = players.map(player => {\n        let score = 0;\n        let winner = 0;\n        let wrong = 0;\n\n        player.predictions.forEach(prediction => {\n            const gameResult = finishedGames.find(game => game.id === prediction.id);\n            if (!!gameResult) {\n                if (correctResult(prediction, gameResult)) {\n                    score++;\n                } else if (correctWinner(prediction, gameResult)) {\n                    winner++;\n                } else {\n                    wrong++;\n                }\n            }\n        })\n\n        return {\n            name: player.name,\n            score,\n            winner,\n            wrong,\n            points: score*3 + winner*2,\n        }\n    })\n    return (\n        <Paper style={{width: '700px', margin: '5px'}} elevation={3}>\n            <MaterialTable\n                columns={[\n                    {title: 'Navn', field: 'name', width: '100px'},\n                    {title: 'Riktig resultat', field: 'score', width: '100px'},\n                    {title: 'Riktig vinner', field: 'winner', width: '100px'},\n                    {title: 'Bom', field: 'wrong', width: '100px'},\n                    {title: 'Peong', field: 'points', width: '100px'},\n                ]}\n                data={playerScores.sort((a, b) => a.points > b.points ? -1 : a.points === b.points ? 0 : 1)}\n                title=\"Sammenlagt\"\n                options={{\n                    paging: false,\n                    search: false,\n                    sorting: false,\n                    tableLayout: 'fixed',\n                }}\n            />\n        </Paper>\n    )\n}\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Papa from 'papaparse';\nimport {GroupTable} from \"./GroupTable\";\nimport {StandingsTable} from \"./StandingsTable\";\n\nconst playerNames: string[] = [\"yngve\", \"tobias\", \"wilberg\", \"ra\"];\nconst groups: string[] = [\"Group A\", \"Group B\", \"Group C\", \"Group D\", \"Group E\", \"Group F\"]\n\nexport interface Game {\n    id: number,\n    time: string,\n    type: string,\n    homeTeam: string,\n    homeScore: number,\n    awayTeam: string,\n    awayScore: number\n}\n\nexport interface Player {\n    name: string,\n    predictions: Game[]\n}\n\nfunction App() {\n    const [players, setPlayers] = useState<Player[]>([])\n    const [results, setResults] = useState<Game[]>([])\n\n    useEffect(() => {\n        const a: Player[] = []\n        playerNames.forEach(name => {\n            Papa.parse<Game>(`${process.env.PUBLIC_URL}/${name}.csv`, {\n                header: true,\n                download: true,\n                skipEmptyLines: true,\n                complete: data => {\n                    a.push({\n                        name,\n                        predictions: data.data.sort((a, b) => a.time > b.time ? -1 : a.time === b.time ? 0 : 1)\n                    })\n                }\n            });\n        })\n        setPlayers(a)\n        Papa.parse<Game>(`${process.env.PUBLIC_URL}/results.csv`, {\n            header: true,\n            download: true,\n            skipEmptyLines: true,\n            complete: data => {\n                setResults(data.data)\n            }\n        });\n    }, [])\n\n    return (\n        <>\n            <div style={{display: 'flex', flexWrap: 'wrap'}}>\n                <StandingsTable results={results} players={players}/>\n            </div>\n            <div style={{display: 'flex', flexWrap: 'wrap'}}>\n                {players.length > 0 && results.length > 0 && (\n                    groups.map(group => <GroupTable key={group} group={group} results={results} players={players}/>)\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}