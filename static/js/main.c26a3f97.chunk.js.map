{"version":3,"sources":["GroupTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GroupTable","group","results","players","gamesInGroup","filter","game","type","Paper","style","width","margin","elevation","columns","title","field","detailPanel","rowData","predictions","map","p","find","id","name","homeScore","awayScore","marginLeft","homeTeam","awayTeam","data","options","showTitle","paging","search","sorting","toolbar","header","rowStyle","rData","gameNotPlayed","toString","correctResult","correctWinner","backgroundColor","onRowClick","event","togglePanel","tableLayout","playerNames","groups","App","useState","setPlayers","setResults","useEffect","a","forEach","Papa","parse","download","skipEmptyLines","complete","push","sort","b","time","display","flexWrap","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c26a3f97.chunk.js","sourcesContent":["import React from \"react\";\nimport {Paper} from \"@material-ui/core\";\nimport MaterialTable from \"@material-table/core\";\nimport {Game, Player} from \"./App\";\n\nexport function GroupTable({group, results, players}: { group: string, results: Game[], players: Player[] }) {\n    const gamesInGroup = results.filter(game => game.type === group);\n    return (\n        <Paper style={{width: '700px', margin: '5px'}} elevation={3}>\n            <MaterialTable\n                columns={[\n                    {title: 'Tid', field: 'time', width: '60px'},\n                    {title: 'Hjemmelag', field: 'homeTeam', width: '75px'},\n                    {title: '', field: 'homeScore', width: '30px'},\n                    {title: '', field: 'awayScore', width: '30px'},\n                    {title: 'Bortelag', field: 'awayTeam', width: '75px'},\n                ]}\n                detailPanel={rowData => {\n                    const predictions: { homeScore: number; awayScore: number; name: string }[] =\n                        players.map(p => {\n                            const game = p.predictions.find(game => game.id === rowData.id)!!;\n                            return {\n                                name: p.name,\n                                homeScore: game?.homeScore,\n                                awayScore: game?.awayScore\n                            }\n                        })\n                    return (\n                        <MaterialTable\n                            style={{marginLeft: '230px', width: '310px'}}\n                            columns={[\n                                {title: 'Navn', field: 'name', width: '90px'},\n                                {title: rowData.homeTeam, field: 'homeScore', width: '29px'},\n                                {title: rowData.awayTeam, field: 'awayScore', width: '29px'},\n                            ]}\n                            data={predictions}\n                            options={{\n                                showTitle: false,\n                                paging: false,\n                                search: false,\n                                sorting: false,\n                                toolbar: false,\n                                header: false,\n                                rowStyle: rData => {\n                                    const gameNotPlayed = rowData.homeScore.toString() === '';\n                                    const correctResult = rowData.homeScore === rData.homeScore && rowData.awayScore === rData.awayScore;\n                                    const correctWinner = (rowData.homeScore > rowData.awayScore && rData.homeScore > rData.awayScore)\n                                        || (rowData.homeScore === rowData.awayScore && rData.homeScore === rData.awayScore)\n                                        || (rowData.homeScore < rowData.awayScore && rData.homeScore < rData.awayScore)\n                                    return {\n                                        backgroundColor: gameNotPlayed ? '' : correctResult ? 'green' : correctWinner ? 'orange' : 'red'\n                                    }\n                                }\n                            }}\n                        />\n                    )\n                }}\n                data={[...gamesInGroup]}\n                title={group}\n                onRowClick={(event, rowData, togglePanel) => togglePanel ? togglePanel() : {}}\n                options={{\n                    paging: false,\n                    search: false,\n                    sorting: false,\n                    header: false,\n                    tableLayout: 'fixed',\n                }}\n            />\n        </Paper>\n    )\n}\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Papa from 'papaparse';\nimport {GroupTable} from \"./GroupTable\";\n\nconst playerNames: string[] = [\"yngve\", \"tobias\", \"wilberg\", \"ra\"];\nconst groups: string[] = [\"Group A\", \"Group B\", \"Group C\", \"Group D\", \"Group E\", \"Group F\"]\n\nexport interface Game {\n    id: number,\n    time: string,\n    type: string,\n    homeTeam: string,\n    homeScore: number,\n    awayTeam: string,\n    awayScore: number\n}\n\nexport interface Player {\n    name: string,\n    predictions: Game[]\n}\n\nfunction App() {\n    const [players, setPlayers] = useState<Player[]>([])\n    const [results, setResults] = useState<Game[]>([])\n\n    useEffect(() => {\n        const a: Player[] = []\n        playerNames.forEach(name => {\n            Papa.parse<Game>(`./${name}.csv`, {\n                header: true,\n                download: true,\n                skipEmptyLines: true,\n                complete: data => {\n                    a.push({\n                        name,\n                        predictions: data.data.sort((a, b) => a.time > b.time ? -1 : a.time === b.time ? 0 : 1)\n                    })\n                }\n            });\n        })\n        setPlayers(a)\n        Papa.parse<Game>(`./results.csv`, {\n            header: true,\n            download: true,\n            skipEmptyLines: true,\n            complete: data => {\n                setResults(data.data)\n            }\n        });\n    }, [])\n\n    return (\n        <div style={{display: 'flex', flexWrap: 'wrap'}}>\n            {players.length > 0 && results.length > 0 && (\n                groups.map(group => <GroupTable group={group} results={results} players={players}/>)\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}